// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod event_cam {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

// struct ChangeEvent, aligned to 8
#[repr(C, align(8))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ChangeEvent {
  time_: f64,
  x_: u16,
  y_: u16,
  polarity_: i8,
  padding0__: u8,  padding1__: u16,
} // pub struct ChangeEvent
impl flatbuffers::SafeSliceAccess for ChangeEvent {}
impl<'a> flatbuffers::Follow<'a> for ChangeEvent {
  type Inner = &'a ChangeEvent;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a ChangeEvent>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a ChangeEvent {
  type Inner = &'a ChangeEvent;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<ChangeEvent>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for ChangeEvent {
    type Output = ChangeEvent;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const ChangeEvent as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b ChangeEvent {
    type Output = ChangeEvent;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const ChangeEvent as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl ChangeEvent {
  pub fn new<'a>(_time: f64, _x: u16, _y: u16, _polarity: i8) -> Self {
    ChangeEvent {
      time_: _time.to_little_endian(),
      x_: _x.to_little_endian(),
      y_: _y.to_little_endian(),
      polarity_: _polarity.to_little_endian(),

      padding0__: 0,padding1__: 0,
    }
  }
  /// time in seconds since some reference
  pub fn time<'a>(&'a self) -> f64 {
    self.time_.from_little_endian()
  }
  /// pixel location column
  pub fn x<'a>(&'a self) -> u16 {
    self.x_.from_little_endian()
  }
  /// pixel location row
  pub fn y<'a>(&'a self) -> u16 {
    self.y_.from_little_endian()
  }
  /// polarity of the change
  pub fn polarity<'a>(&'a self) -> i8 {
    self.polarity_.from_little_endian()
  }
}

pub enum FrameDataOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

/// FrameData groups an arbitrary number of change events 
pub struct FrameData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FrameData<'a> {
    type Inner = FrameData<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> FrameData<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        FrameData {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args FrameDataArgs<'args>) -> flatbuffers::WIPOffset<FrameData<'bldr>> {
      let mut builder = FrameDataBuilder::new(_fbb);
      builder.add_falling_count(args.falling_count);
      builder.add_rising_count(args.rising_count);
      if let Some(x) = args.events { builder.add_events(x); }
      builder.finish()
    }

    pub const VT_EVENTS: flatbuffers::VOffsetT = 4;
    pub const VT_RISING_COUNT: flatbuffers::VOffsetT = 6;
    pub const VT_FALLING_COUNT: flatbuffers::VOffsetT = 8;

  /// vector of events included in this frame
  #[inline]
  pub fn events(&self) -> Option<&'a [ChangeEvent]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<ChangeEvent>>>(FrameData::VT_EVENTS, None).map(|v| v.safe_slice() )
  }
  /// the count of rising edge events included in this frame
  #[inline]
  pub fn rising_count(&self) -> u32 {
    self._tab.get::<u32>(FrameData::VT_RISING_COUNT, Some(0)).unwrap()
  }
  /// the count of falling edge events included in this frame
  #[inline]
  pub fn falling_count(&self) -> u32 {
    self._tab.get::<u32>(FrameData::VT_FALLING_COUNT, Some(0)).unwrap()
  }
}

pub struct FrameDataArgs<'a> {
    pub events: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , ChangeEvent>>>,
    pub rising_count: u32,
    pub falling_count: u32,
}
impl<'a> Default for FrameDataArgs<'a> {
    #[inline]
    fn default() -> Self {
        FrameDataArgs {
            events: None,
            rising_count: 0,
            falling_count: 0,
        }
    }
}
pub struct FrameDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FrameDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_events(&mut self, events: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ChangeEvent>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FrameData::VT_EVENTS, events);
  }
  #[inline]
  pub fn add_rising_count(&mut self, rising_count: u32) {
    self.fbb_.push_slot::<u32>(FrameData::VT_RISING_COUNT, rising_count, 0);
  }
  #[inline]
  pub fn add_falling_count(&mut self, falling_count: u32) {
    self.fbb_.push_slot::<u32>(FrameData::VT_FALLING_COUNT, falling_count, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FrameDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FrameDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FrameData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

}  // pub mod EventCam

